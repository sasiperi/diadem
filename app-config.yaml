app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
   # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: localhost
      port: 5432
      user: sasipers
      password: 12345
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  '/test':
    target: 'https://example.com'
    changeOrigin: true
  '/jenkins/api':
    target: http://127.0.0.1:8085
    changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    okta:
      development:
        clientId: 0oao1p23lbMNrTmW6357
        clientSecret: XpBmAF9RnBQiaQUy7N6Us1fdPu6-no_sszBfs6Hn
        audience: https://dev-696450.okta.com/
        authServerId: default # Optional
        #idp: 00o12wqa7nOLW1FUC357 # Optional

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/pull-request/template.yaml
      rules:
        - allow: [Template]
    - type: url
      target: https://github.com/sasiperi/software-templates/blob/main/scaffolder-templates/docs-template-cookiecutter/template.yaml
      rules:
        - allow: [Template] 
    #- type: url
      #target: https://github.com/sasiperi/software-templates/blob/main/scaffolder-templates/springboot-mvc-rest-api-template/template.yaml
    - type: file
      target: ../../examples/springboot-api-template/template.yaml
      rules:
        - allow: [Template]      

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
    #- type: 'localKubectlProxy'
      clusters:
        - url: https://kubernetes.docker.internal:6443
          name: kind-kube
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          skipMetricsLookup: true
          #serviceAccountToken: ${K8S_MINIKUBE_TOKEN}
          serviceAccountToken: ${K8S_MINIKUBE_TOKEN}
          #serviceAcountToken: eyJhbGciOiJSUzI1NiIsImtpZCI6IkMwQ1M3bGQwQWgwamp3cUREQS1VdTBZM2RvenNrTjdUNXRBMy0tWVBnNEEifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjc0MDAwNTg0LCJpYXQiOjE2NzM5OTY5ODQsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0Iiwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImJhY2stc3RhZ2UiLCJ1aWQiOiIzYmI3OTBmNC01OWE0LTQ0ZGEtYjNlNy1hZjYzZWI2MWJkN2EifX0sIm5iZiI6MTY3Mzk5Njk4NCwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6YmFjay1zdGFnZSJ9.UYv-PyAhFT2eZMU5pQq9X3N0wjFN8AVC_5TnQEQVz3KlwnxFmRVDzhfl17xjhIAxVEOpiIhtyfuoGOngBuByGh6H-CQQElk-cbgHu9meCxky5TP6pcY-QkkZ--w5G5gT-g8C9ayXEppJ3yQeXFQWv58sBjaW3jjUhAiXOLl2oXqudWbsfKwJEf5GRxdQqEF3Ub5B6jYAVAYzanu6Zd9kUH3_fUU6E1sNvCW-FKaXzZSxpGVdztMx1Rils1EzmMvWfPSMjeUvPE6jZ2KvETT-F9JJR_ALVM9vQliuZp-cEO2t6EFt8mNFsiM3DK-_l_8yMOufFSmRO8PM59i2EvA56A
          #serviceAccountToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IkMwQ1M3bGQwQWgwamp3cUREQS1VdTBZM2RvenNrTjdUNXRBMy0tWVBnNEEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJzZWNyZXQtc2EtYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiYWRtaW4tdXNlciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImNiMGU0ZWUwLTc4NTYtNGJiOC1hMTc4LTA1N2VhZDlkNTY4ZiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.gZEqimE-0LITn9qKee6exb8LMJ55UpbxwATHVHDt4cvIEagrvpUBrFCMx9rEmRI0RO9dClKissmmwjVeQEf62P1RiWuF0gBhVDVnK0EALLXGsscQa29vxhL7jb_xiWvtGM17Kf2GewWwMCl1S56Yb2U4GcdvNIN5FoRAVqV0BtayQEHEOGBnxhb2RlanqX4Q3cRfeo-WsgebrOCh2zXcVnYElYLqPc44c94CNtX0t01LcHt6nE9lNvCWdNjTe0mYFyliB3tm1sBF-6VeTyX1t7ECoBeOwR0oX1VmA1vqqq0ZKVhIyInJQBpEW-wVPQBrE-uGD7eCv2xr92cC-y8M4g'
          dashboardUrl: http://127.0.0.1:8001 # url copied from running the command: minikube service kubernetes-dashboard -n kubernetes-dashboard
          dashboardApp: standard
          #caData: ${K8S_CONFIG_CA_DATA}
          #caFile: '' # local path to CA file